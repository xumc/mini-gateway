// Code generated by protoc-gen-go. DO NOT EDIT.
// source: mock_upstream_grpc_service.proto

package proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Hello                string   `protobuf:"bytes,1,opt,name=hello,proto3" json:"hello,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_c07f002f1c4d4372, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetHello() string {
	if m != nil {
		return m.Hello
	}
	return ""
}

type Reply struct {
	World                string   `protobuf:"bytes,1,opt,name=world,proto3" json:"world,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Reply) Reset()         { *m = Reply{} }
func (m *Reply) String() string { return proto.CompactTextString(m) }
func (*Reply) ProtoMessage()    {}
func (*Reply) Descriptor() ([]byte, []int) {
	return fileDescriptor_c07f002f1c4d4372, []int{1}
}

func (m *Reply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Reply.Unmarshal(m, b)
}
func (m *Reply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Reply.Marshal(b, m, deterministic)
}
func (m *Reply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Reply.Merge(m, src)
}
func (m *Reply) XXX_Size() int {
	return xxx_messageInfo_Reply.Size(m)
}
func (m *Reply) XXX_DiscardUnknown() {
	xxx_messageInfo_Reply.DiscardUnknown(m)
}

var xxx_messageInfo_Reply proto.InternalMessageInfo

func (m *Reply) GetWorld() string {
	if m != nil {
		return m.World
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "proto.Request")
	proto.RegisterType((*Reply)(nil), "proto.Reply")
}

func init() { proto.RegisterFile("mock_upstream_grpc_service.proto", fileDescriptor_c07f002f1c4d4372) }

var fileDescriptor_c07f002f1c4d4372 = []byte{
	// 150 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xc8, 0xcd, 0x4f, 0xce,
	0x8e, 0x2f, 0x2d, 0x28, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0x8d, 0x4f, 0x2f, 0x2a, 0x48, 0x8e, 0x2f,
	0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53,
	0x4a, 0xf2, 0x5c, 0xec, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x22, 0x5c, 0xac, 0x19,
	0xa9, 0x39, 0x39, 0xf9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x9c, 0x41, 0x10, 0x8e, 0x92, 0x2c, 0x17,
	0x6b, 0x50, 0x6a, 0x41, 0x4e, 0x25, 0x48, 0xba, 0x3c, 0xbf, 0x28, 0x27, 0x05, 0x26, 0x0d, 0xe6,
	0x18, 0xd9, 0x70, 0x09, 0xbb, 0x17, 0x15, 0x24, 0x87, 0x42, 0x6d, 0x0a, 0x86, 0xd8, 0x21, 0xa4,
	0xca, 0xc5, 0xea, 0x01, 0xd2, 0x2e, 0xc4, 0x07, 0xb1, 0x4e, 0x0f, 0x6a, 0x89, 0x14, 0x0f, 0x9c,
	0x5f, 0x90, 0x53, 0x99, 0xc4, 0x06, 0xe6, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x08, 0xf2,
	0xf5, 0xed, 0xaf, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GrpcUpstreamServiceClient is the client API for GrpcUpstreamService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GrpcUpstreamServiceClient interface {
	Hello(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error)
}

type grpcUpstreamServiceClient struct {
	cc *grpc.ClientConn
}

func NewGrpcUpstreamServiceClient(cc *grpc.ClientConn) GrpcUpstreamServiceClient {
	return &grpcUpstreamServiceClient{cc}
}

func (c *grpcUpstreamServiceClient) Hello(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Reply, error) {
	out := new(Reply)
	err := c.cc.Invoke(ctx, "/proto.GrpcUpstreamService/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrpcUpstreamServiceServer is the server API for GrpcUpstreamService service.
type GrpcUpstreamServiceServer interface {
	Hello(context.Context, *Request) (*Reply, error)
}

// UnimplementedGrpcUpstreamServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGrpcUpstreamServiceServer struct {
}

func (*UnimplementedGrpcUpstreamServiceServer) Hello(ctx context.Context, req *Request) (*Reply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}

func RegisterGrpcUpstreamServiceServer(s *grpc.Server, srv GrpcUpstreamServiceServer) {
	s.RegisterService(&_GrpcUpstreamService_serviceDesc, srv)
}

func _GrpcUpstreamService_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrpcUpstreamServiceServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GrpcUpstreamService/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrpcUpstreamServiceServer).Hello(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _GrpcUpstreamService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GrpcUpstreamService",
	HandlerType: (*GrpcUpstreamServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _GrpcUpstreamService_Hello_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mock_upstream_grpc_service.proto",
}
